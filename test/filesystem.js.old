'use strict'

import test from 'ava'
import Filesystem from '../src/filesystem'

test('create filesystem', t => {
  const mfs = new Filesystem()
  t.true(mfs instanceof Filesystem)
})

test('directories', t => {
  const mfs = new Filesystem()
  mfs.mkdir('/foo')
  t.true(mfs.stat('/foo').isDirectory())
  mfs.rmdir('/foo')

  mfs.mkdir('/foo/bar', { recursive: true })
  t.true(mfs.stat('/foo/bar').isDirectory())
  mfs.symlink('bar', '/foo/baz')
  t.throws(() => mfs.rmdir('/foo/baz'), { code: 'ENOTDIR' })
  t.throws(() => mfs.rmdir('/foo'), { code: 'ENOTEMPTY' })
  mfs.unlink('/foo/baz')
  mfs.rmdir('/foo/bar')
  mfs.rmdir('/foo')
  t.throws(() => mfs.rmdir('/foo'), { code: 'ENOENT' })

  mfs.mkdir('/foo', 0o751)
  t.is(mfs.stat('/foo').mode & 0o777, 0o751)
  mfs.rmdir('/foo')

  t.throws(() => mfs.mkdir('/foo/bar'), { code: 'ENOENT' })
  t.throws(() => mfs.rmdir('/'), { code: 'EPERM' })
})

test('stat', t => {
  const mfs = new Filesystem()
  mfs.mkdir('/foo')
  mfs.symlink('foo', '/bar')
  t.true(mfs.stat('/bar').isDirectory())
  t.true(mfs.lstat('/bar').isSymbolicLink())
})

test('chmod', t => {
  const mfs = new Filesystem()
  mfs.mkdir('/foo')
  mfs.chmod('/foo', 0o751)
  t.is(mfs.stat('/foo').mode & 0o777, 0o751)
})

test('chown', t => {
  const mfs = new Filesystem()
  mfs.mkdir('/foo')
  t.throws(() => mfs.chown('/foo', 123, 234), { code: 'ENOSYS' })
  t.throws(() => mfs.lchown('/foo', 123, 234), { code: 'ENOSYS' })
})
